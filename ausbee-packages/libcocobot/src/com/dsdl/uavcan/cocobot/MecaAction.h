/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/damien/prog/ausbee-packages/libcocobot/dsdl/uavcan/cocobot/203.MecaAction.uavcan
 */

#ifndef __UAVCAN_COCOBOT_MECAACTION
#define __UAVCAN_COCOBOT_MECAACTION

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
uint4 STATUS          = 0

uint4 INIT            = 1

uint4 TAKE_DISTRIB    = 2
uint4 TAKE_ACCELL     = 3
uint4 TAKE_GOLDENIUM  = 4
uint4 TAKE_FLOOR      = 5

uint4 REST_EMPTY      = 6
uint4 REST_NORMAL     = 7
uint4 REST_GLODNENIUM = 8

uint4 DROP_FLOOR      = 9
uint4 DROP_BALANCE    = 10
uint4 DROP_ACCELL     = 11

uint4 DIRECT_ARM      = 12

uint8 req
uint8 arm

uint8 x
uint8 y
uint8 z
uint8 a
uint8 d

---

bool busy
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.cocobot.MecaAction
saturated uint8 req
saturated uint8 arm
saturated uint8 x
saturated uint8 y
saturated uint8 z
saturated uint8 a
saturated uint8 d
---
saturated bool busy
******************************************************************************/

#define UAVCAN_COCOBOT_MECAACTION_ID                       203
#define UAVCAN_COCOBOT_MECAACTION_NAME                     "uavcan.cocobot.MecaAction"
#define UAVCAN_COCOBOT_MECAACTION_SIGNATURE                (0xFCBB395F3B99DCA5ULL)

#define UAVCAN_COCOBOT_MECAACTION_REQUEST_MAX_SIZE         ((56 + 7)/8)

// Constants
#define UAVCAN_COCOBOT_MECAACTION_REQUEST_STATUS                              0 // 0
#define UAVCAN_COCOBOT_MECAACTION_REQUEST_INIT                                1 // 1
#define UAVCAN_COCOBOT_MECAACTION_REQUEST_TAKE_DISTRIB                        2 // 2
#define UAVCAN_COCOBOT_MECAACTION_REQUEST_TAKE_ACCELL                         3 // 3
#define UAVCAN_COCOBOT_MECAACTION_REQUEST_TAKE_GOLDENIUM                      4 // 4
#define UAVCAN_COCOBOT_MECAACTION_REQUEST_TAKE_FLOOR                          5 // 5
#define UAVCAN_COCOBOT_MECAACTION_REQUEST_REST_EMPTY                          6 // 6
#define UAVCAN_COCOBOT_MECAACTION_REQUEST_REST_NORMAL                         7 // 7
#define UAVCAN_COCOBOT_MECAACTION_REQUEST_REST_GLODNENIUM                     8 // 8
#define UAVCAN_COCOBOT_MECAACTION_REQUEST_DROP_FLOOR                          9 // 9
#define UAVCAN_COCOBOT_MECAACTION_REQUEST_DROP_BALANCE                       10 // 10
#define UAVCAN_COCOBOT_MECAACTION_REQUEST_DROP_ACCELL                        11 // 11
#define UAVCAN_COCOBOT_MECAACTION_REQUEST_DIRECT_ARM                         12 // 12

typedef struct
{
    // FieldTypes
    uint8_t    req;                           // bit len 8
    uint8_t    arm;                           // bit len 8
    uint8_t    x;                             // bit len 8
    uint8_t    y;                             // bit len 8
    uint8_t    z;                             // bit len 8
    uint8_t    a;                             // bit len 8
    uint8_t    d;                             // bit len 8

} uavcan_cocobot_MecaActionRequest;

extern
uint32_t uavcan_cocobot_MecaActionRequest_encode(uavcan_cocobot_MecaActionRequest* source, void* msg_buf);

extern
int32_t uavcan_cocobot_MecaActionRequest_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_cocobot_MecaActionRequest* dest, uint8_t** dyn_arr_buf);

extern
uint32_t uavcan_cocobot_MecaActionRequest_encode_internal(uavcan_cocobot_MecaActionRequest* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t uavcan_cocobot_MecaActionRequest_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_cocobot_MecaActionRequest* dest, uint8_t** dyn_arr_buf, int32_t offset);

#define UAVCAN_COCOBOT_MECAACTION_RESPONSE_MAX_SIZE        ((1 + 7)/8)

// Constants

typedef struct
{
    // FieldTypes
    bool       busy;                          // bit len 1

} uavcan_cocobot_MecaActionResponse;

extern
uint32_t uavcan_cocobot_MecaActionResponse_encode(uavcan_cocobot_MecaActionResponse* source, void* msg_buf);

extern
int32_t uavcan_cocobot_MecaActionResponse_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_cocobot_MecaActionResponse* dest, uint8_t** dyn_arr_buf);

extern
uint32_t uavcan_cocobot_MecaActionResponse_encode_internal(uavcan_cocobot_MecaActionResponse* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t uavcan_cocobot_MecaActionResponse_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_cocobot_MecaActionResponse* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_COCOBOT_MECAACTION