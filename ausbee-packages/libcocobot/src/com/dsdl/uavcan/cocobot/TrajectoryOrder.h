/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /home/damien/prog/ausbee-packages/libcocobot/dsdl/uavcan/cocobot/TrajectoryOrder.uavcan
 */

#ifndef __UAVCAN_COCOBOT_TRAJECTORYORDER
#define __UAVCAN_COCOBOT_TRAJECTORYORDER

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
uint4 TYPE_D                      = 0
uint4 TYPE_A                      = 1
uint4 TYPE_XY                     = 2
uint4 TYPE_XY_BACKWARD            = 3
uint4 TYPE_XY_CIRCLE              = 4
uint4 TYPE_XY_CIRCLE_BACKWARD     = 5

uint4 order_type
float32 time
float32 x
float32 y
float32 a
float32 d

float32 est_start_x
float32 est_start_y
float32 est_start_a
float32 est_end_x
float32 est_end_y
float32 est_end_a
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.cocobot.TrajectoryOrder
saturated uint4 order_type
saturated float32 time
saturated float32 x
saturated float32 y
saturated float32 a
saturated float32 d
saturated float32 est_start_x
saturated float32 est_start_y
saturated float32 est_start_a
saturated float32 est_end_x
saturated float32 est_end_y
saturated float32 est_end_a
******************************************************************************/

#define UAVCAN_COCOBOT_TRAJECTORYORDER_NAME                "uavcan.cocobot.TrajectoryOrder"
#define UAVCAN_COCOBOT_TRAJECTORYORDER_SIGNATURE           (0x20DC67A8648F3F16ULL)

#define UAVCAN_COCOBOT_TRAJECTORYORDER_MAX_SIZE            ((356 + 7)/8)

// Constants
#define UAVCAN_COCOBOT_TRAJECTORYORDER_TYPE_D                                 0 // 0
#define UAVCAN_COCOBOT_TRAJECTORYORDER_TYPE_A                                 1 // 1
#define UAVCAN_COCOBOT_TRAJECTORYORDER_TYPE_XY                                2 // 2
#define UAVCAN_COCOBOT_TRAJECTORYORDER_TYPE_XY_BACKWARD                       3 // 3
#define UAVCAN_COCOBOT_TRAJECTORYORDER_TYPE_XY_CIRCLE                         4 // 4
#define UAVCAN_COCOBOT_TRAJECTORYORDER_TYPE_XY_CIRCLE_BACKWARD                5 // 5

typedef struct
{
    // FieldTypes
    uint8_t    order_type;                    // bit len 4
    float      time;                          // float32 Saturate
    float      x;                             // float32 Saturate
    float      y;                             // float32 Saturate
    float      a;                             // float32 Saturate
    float      d;                             // float32 Saturate
    float      est_start_x;                   // float32 Saturate
    float      est_start_y;                   // float32 Saturate
    float      est_start_a;                   // float32 Saturate
    float      est_end_x;                     // float32 Saturate
    float      est_end_y;                     // float32 Saturate
    float      est_end_a;                     // float32 Saturate

} uavcan_cocobot_TrajectoryOrder;

extern
uint32_t uavcan_cocobot_TrajectoryOrder_encode(uavcan_cocobot_TrajectoryOrder* source, void* msg_buf);

extern
int32_t uavcan_cocobot_TrajectoryOrder_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_cocobot_TrajectoryOrder* dest, uint8_t** dyn_arr_buf);

extern
uint32_t uavcan_cocobot_TrajectoryOrder_encode_internal(uavcan_cocobot_TrajectoryOrder* source, void* msg_buf, uint32_t offset, uint8_t root_item);

extern
int32_t uavcan_cocobot_TrajectoryOrder_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_cocobot_TrajectoryOrder* dest, uint8_t** dyn_arr_buf, int32_t offset);

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_COCOBOT_TRAJECTORYORDER